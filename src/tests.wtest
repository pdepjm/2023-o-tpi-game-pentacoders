import jugadores.*
import municion.*
import wollok.game.*
import direcciones.*
import angulo.*


describe "Nave" {

	var jugador1 = null
	var jugador2 = null

	method initialize() {
		game.clear()
		jugador1 = new Nave(numeroNave="1", imagen = "Jugador1_0.png")
		jugador2 = new Nave(numeroNave="2", imagen = "Jugador2_180.png")
	}

	test "Puede disparar hacia la derecha (0°)" {
		game.addVisual(jugador1)
		game.addVisual(jugador2) // el que se testea
		/*game.whenCollideDo(jugador1, { elemento =>
			if (elemento.soyMunicion()) {
				jugador1.sufrirDanio(30)
				elemento.quitar()
			}// para arreglar esto, primero hagan el cambio y luego testeen chocarseCon sin onCollide
		})*/
		game.whenCollideDo(jugador2, { elemento =>
			elemento.chocasteCon(jugador2)
			elemento.quitar()
		})
		
		
		
		jugador1.mover(derecha)
		jugador1.mover(derecha)
		var vidaAnterior = jugador1.hp()
		jugador2.disparar()
		assert.equals(vidaAnterior - 30, jugador1.hp())
	}
	
	
	
	test "Se mueve a la Izquierda"{
		var posAnterior = jugador1.position()
		jugador1.mover(izquierda)
		assert.equals(posAnterior.left(1), jugador1.position())
	}
	
	test "Se mueve a la Derecha"{
		var posAnterior = jugador1.position()
		jugador1.mover(derecha)
		assert.equals(posAnterior.right(1), jugador1.position())
	}
	
	test "Se mueve para Abajo"{
		var posAnterior = jugador1.position()
		jugador1.mover(abajo)
		assert.equals(posAnterior.up(-1), jugador1.position())
	}
	
	test "Se mueve para Arriba"{
		var posAnterior = jugador1.position()
		jugador1.mover(arriba)
		assert.equals(posAnterior.up(1), jugador1.position())
	}
	
	test "Se mueve para Arriba y a la Derecha"{
		var posAnterior = jugador1.position()
		jugador1.mover(arribaDerecha)
		assert.equals(posAnterior.up(1).right(1), jugador1.position())
	}
	
	test "Se mueve para Arriba y a la Izquierda"{
		var posAnterior = jugador1.position()
		jugador1.mover(arribaIzquierda)
		assert.equals(posAnterior.up(1).left(1), jugador1.position())
	}
	
	test "Se mueve para Abajo y a la Derecha"{
		var posAnterior = jugador1.position()
		jugador1.mover(abajoDerecha)
		assert.equals(posAnterior.up(-1).right(1), jugador1.position())
	}
	
	test "Se mueve para Abajo y a la Izquierda"{
		var posAnterior = jugador1.position()
		jugador1.mover(abajoIzquierda)
		assert.equals(posAnterior.up(-1).left(1), jugador1.position())
	}
	
	
	

	test "Rota 45° la nave" {
		game.addVisual(jugador1)
		jugador1.rotarA(horario)
		assert.equals(315, jugador1.angulo()) // Arranca en 0 o 360
	}
	
	
	
	
	
	

	test "Cuando se mueve hacia arriba está en la posición correspondiente" {
		//game.addVisual(jugador1)	no se pone?
		var posAnterior = jugador1.position()
		jugador1.mover(arriba)
		assert.equals(posAnterior.up(1), jugador1.position())
	}
	
	
	
	
	

}

/*
 * 
 * var municion= new Pelota()
 * 
 * test "Puede disparar hacia abajo (270°) " {
 * 	
 * 	game.onTick(100, "123", { municion.position()} )
 * 	
 * 	var posicionAnterior = municion.position()
 * 	
 * 	municion.position( game.at(2,2) ) 
 * 	
 * 	municion.movete(270,"123")
 * 	
 * 	//assert.equals(posicionAnterior.up(-1), municion.position() )
 * 	
 * 	assert.equals(1,municion.position().y())
 * 	
 * 	
 * 	//No encuentro manera de pensar el test
 * 	// Que le pegue a otro jugador 
 }*/
/* 
 * test "Puede disparar hacia arriba" {
 * 	// Que le pegue a otro jugador 
 * }
 * 
 * test "Puede disparar hacia abajo" {
 * 	jugador.rotarADerecha()
 * 	
 * 	// Que le pegue a otro jugador 
 * }
 * 
 * test "Puede disparar hacia abajo" {
 * 	jugador.rotarAIzquierda()
 * 	// Que le pegue a otro jugador 
 }*/
/*  
 * test "testX" {

 * 	assert.that(true)

 }*/

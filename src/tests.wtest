import jugadores.*
import municion.*
import wollok.game.*

describe "Nave" {

	var jugador1 = null
	var jugador2 = null

	method initialize() {
		game.clear()
		jugador1 = new Nave()
		jugador2 = new Nave()
	}

	test "Puede disparar hacia la derecha (0°)" {
		game.addVisual(jugador1)
		game.addVisual(jugador2) // el que se testea
		game.whenCollideDo(jugador1, { elemento =>
			if (elemento.soyMunicion()) {
				jugador1.sufrirDanio(30)
				elemento.quitar()
			} // para arreglar esto, primero hagan el cambio y luego testeen chocarseCon sin onCollide
		})
		jugador1.moverDerecha()
		jugador1.moverDerecha()
		var vidaAnterior = jugador1.hp()
		jugador2.disparar()
		assert.equals(vidaAnterior - 30, jugador1.hp())
	}

	test "Rota 45° la nave" {
		game.addVisual(jugador1)
		jugador1.rotarADerecha()
		assert.equals(315, jugador1.angulo()) // Arranca en 0 o 360
	}

	test "Cuando se mueve hacia arriba está en la posición correspondiente" {
		game.addVisual(jugador1)
		var posAnterior = jugador1.position()
		jugador1.moverArriba()
		assert.equals(posAnterior.up(1), jugador1.position())
	}

}

/*
 * 
 * var municion= new Pelota()
 * 
 * test "Puede disparar hacia abajo (270°) " {
 * 	
 * 	game.onTick(100, "123", { municion.position()} )
 * 	
 * 	var posicionAnterior = municion.position()
 * 	
 * 	municion.position( game.at(2,2) ) 
 * 	
 * 	municion.movete(270,"123")
 * 	
 * 	//assert.equals(posicionAnterior.up(-1), municion.position() )
 * 	
 * 	assert.equals(1,municion.position().y())
 * 	
 * 	
 * 	//No encuentro manera de pensar el test
 * 	// Que le pegue a otro jugador 
 }*/
/* 
 * test "Puede disparar hacia arriba" {
 * 	// Que le pegue a otro jugador 
 * }
 * 
 * test "Puede disparar hacia abajo" {
 * 	jugador.rotarADerecha()
 * 	
 * 	// Que le pegue a otro jugador 
 * }
 * 
 * test "Puede disparar hacia abajo" {
 * 	jugador.rotarAIzquierda()
 * 	// Que le pegue a otro jugador 
 }*/
/*  
 * test "testX" {

 * 	assert.that(true)

 }*/
